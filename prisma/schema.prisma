generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccessTier {
  BETA
  PRELAUNCH
  NORMAL
  BASE
  PRO
}

model User {
  id       String  @id @default(cuid())
  clerkId  String  @unique
  email    String  @unique
  name     String
  username String? @unique

  discovery         String?  @default("none")
  role              String?  @default("founder")
  bestStreakOverall Int      @default(0)
  activeProjectId   String?
  activeProject     Product? @relation("ActiveProject", fields: [activeProjectId], references: [id])
  createdAt         DateTime @default(now())

  products  Product[]
  buildLogs BuildLog[]
  dailyLogs DailyLog[]
  trial     Trial?
  streaks   Streak[]
}

model EarlyAccess {
  id        String     @id @default(cuid())
  email     String     @unique
  tier      AccessTier @default(NORMAL)
  invited   Boolean    @default(false)
  claimed   Boolean    @default(false)
  claimedAt DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
}

model Trial {
  id        String     @id @default(cuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  plan      AccessTier @default(NORMAL)
  startDate DateTime
  endDate   DateTime
  expired   Boolean    @default(false)
}

model Product {
  id   String @id @default(cuid())
  name String 

  description        String
  problemStatement   String
  targetAudience     String
  userGoals          String
  uniqueValueProp    String
  techStack          String
  inspirationApps    String
  initialFeatures    String
  deadline           DateTime
  dailyCommitmentHrs Float
  userId             String
  user               User       @relation(fields: [userId], references: [id])
  roadmap            Roadmap?
  features           Feature[]
  buildLogs          BuildLog[]
  dailyLogs          DailyLog[]
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  streaks            Streak[]

  User User[] @relation("ActiveProject")
}

model Roadmap {
  id         String   @id @default(cuid())
  mvpSummary String
  productId  String   @unique
  product    Product  @relation(fields: [productId], references: [id])
  createdAt  DateTime @default(now())
}

model Feature {
  id          String  @id @default(cuid())
  name        String
  description String
  rank        Int
  productId   String
  product     Product @relation(fields: [productId], references: [id])
  tasks       Task[]
}

model Task {
  id        String   @id @default(cuid())
  title     String
  dayNumber Int?
  completed Boolean  @default(false)
  featureId String
  feature   Feature  @relation(fields: [featureId], references: [id])
  dayTask   DayTask?
}

model DayTask {
  id          String   @id @default(cuid())
  taskId      String   @unique
  task        Task     @relation(fields: [taskId], references: [id])
  dayIndex    Int
  dueDate     DateTime
  category    String
  description String
  status      String   @default("backlog")
}

model DailyLog {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  projectId      String
  project        Product  @relation(fields: [projectId], references: [id])
  date           DateTime
  completedTasks Json
  notes          String?
  createdAt      DateTime @default(now())
}

model BuildLog {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  projectId   String
  project     Product  @relation(fields: [projectId], references: [id])
  logDate     DateTime
  tweet       String?
  dayIndex    Int      @default(1)
  summary     String
  sourceTasks Json
  generatedAt DateTime @default(now())
}

model Streak {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  productId      String
  product        Product  @relation(fields: [productId], references: [id])
  currentStreak  Int      @default(0)
  bestStreak     Int      @default(0)
  lastActiveDate DateTime
  streakStart    DateTime
  updatedAt      DateTime @updatedAt

  @@unique([userId, productId])
}
