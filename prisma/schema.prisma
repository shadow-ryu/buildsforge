generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
  output        = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("BETA_DATABASE_URL")
}

enum AccessTier {
  BETA
  PRELAUNCH
  NORMAL
  BASE
  PRO
}

enum TaskStatus {
  backlog
  in_progress
  done
  skipped
  blocked
}

model User {
  id                  String   @id @default(cuid())
  clerkId             String   @unique
  email               String   @unique
  name                String
  username            String?  @unique
  onboardingCompleted Boolean  @default(false)
  discovery           String?  @default("none")
  role                String?  @default("founder")
  bestStreakOverall   Int      @default(0)
  createdAt           DateTime @default(now())

  // Relations
  products    Product[]
  buildLogs   BuildLog[]
  trial       Trial?
  DailyStreak DailyStreak[]
  aiLogs      AiLog[]
  tokenUsages TokenUsage[]

  settings Settings?

  Subscription Subscription?
}

model EarlyAccess {
  id        String     @id @default(cuid())
  email     String     @unique
  tier      AccessTier @default(NORMAL)
  invited   Boolean    @default(false)
  claimed   Boolean    @default(false)
  claimedAt DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
}

model Trial {
  id        String     @id @default(cuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  plan      AccessTier @default(NORMAL)
  startDate DateTime
  endDate   DateTime
  expired   Boolean    @default(false)
}

model Product {
  id                 String   @id @default(cuid())
  name               String
  slug               String   @unique
  description        String?
  problemStatement   String
  targetAudience     String
  userGoals          String
  uniqueValueProp    String
  isMvpGenerated     Boolean  @default(false)
  isRoadmapGenerated Boolean  @default(false)
  currentStreak      Int      @default(0)
  AllTimeBestStreak  Int      @default(0)
  losingStreak       Boolean  @default(false)
  reviseRoadmap      Boolean  @default(false)
  active             Boolean  @default(false)
  techStack          String?
  inspirationApps    String?
  initialFeatures    String?
  startDate          DateTime @default(now())
  deadline           DateTime
  dailyCommitmentHrs Float    @default(2.0)
  userId             String
  user               User     @relation(fields: [userId], references: [id])
  mvpSummary         String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  features    Feature[]
  buildLogs   BuildLog[]
  DailyStreak DailyStreak[]
  aiLogs      AiLog[]
}

model Feature {
  id          String  @id @default(cuid())
  name        String
  description String
  rank        Int
  productId   String
  product     Product @relation(fields: [productId], references: [id])
  tasks       Task[]
}

model Task {
  id             String     @id @default(cuid())
  title          String
  estimatedHours Float? // Used for roadmap time planning
  status         TaskStatus @default(backlog)
  dayNumber      Int?
  completed      Boolean    @default(false)
  featureId      String
  feature        Feature    @relation(fields: [featureId], references: [id])
  dayTask        DayTask?
}

model DayTask {
  id            String    @id @default(cuid())
  taskId        String    @unique
  task          Task      @relation(fields: [taskId], references: [id])
  dayIndex      Int
  dueDate       DateTime
  completedAt   DateTime?
  category      String
  description   String
  status        String    @default("backlog")
  milestoneGoal String? // What this day is aiming to unlock
  shipCheck     String? // What outcome proves real progress
  buildLogId    String?
  buildLog      BuildLog? @relation(fields: [buildLogId], references: [id])
}

model BuildLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String // renamed from projectId to match Product model
  product   Product  @relation(fields: [productId], references: [id])
  logDate   DateTime
  tweet     String?
  dayIndex  Int      @default(1)
  summary   String

  generatedAt DateTime  @default(now())
  DayTask     DayTask[]
}

model DailyStreak {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  date        DateTime @unique
  hasBuildLog Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model AiLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  ai_model  String
  type      String // e.g. "mvp_generation", "roadmap", "build_log"
  input     Json // Full GPT input
  output    Json // GPT output stored for debugging/auditing
  createdAt DateTime @default(now())
}

model TokenUsage {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  purpose   String // e.g. "generate_mvp", "rebuild_log"
  tokens    Int
  createdAt DateTime @default(now())
}

model Settings {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  dailyHours   Float   @default(2.0)
  deadlineDays Int     @default(14)
  aiModel      String  @default("gpt-4")
  emailNudges  Boolean @default(true)
  isPublic     Boolean @default(false)
  slug         String? @unique
  bio          String? @default("")
  twitter      String? @default("")
}

model Subscription {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  stripeCustomerId     String    @unique
  stripeSubscriptionId String    @unique
  status               String // e.g. 'trialing', 'active', 'canceled'
  planName             String // e.g. 'starter', 'pro'
  currentPeriodEnd     DateTime
  trialEndsAt          DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}
