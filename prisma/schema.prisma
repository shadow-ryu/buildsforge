// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  clerkId   String    @unique
  email     String    @unique
  name      String?
  createdAt DateTime  @default(now())
  products  Product[]
  // snapshots Snapshot[]

  BuildLog BuildLog[]

  DailyLog DailyLog[]
}

model Product {
  id                 String    @id @default(cuid())
  name               String
  description        String
  problemStatement   String
  targetAudience     String
  userGoals          String
  uniqueValueProp    String
  techStack          String
  inspirationApps    String
  initialFeatures    String
  deadline           DateTime
  dailyCommitmentHrs Float
  userId             String
  user               User      @relation(fields: [userId], references: [id])
  roadmap            Roadmap?
  features           Feature[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  BuildLog BuildLog[]

  DailyLog DailyLog[]
}

model Roadmap {
  id         String   @id @default(cuid())
  mvpSummary String
  productId  String   @unique
  product    Product  @relation(fields: [productId], references: [id])
  createdAt  DateTime @default(now())
}

model Feature {
  id          String  @id @default(cuid())
  name        String
  description String
  rank        Int
  productId   String
  product     Product @relation(fields: [productId], references: [id])
  tasks       Task[]
}

model Task {
  id        String   @id @default(cuid())
  title     String
  dayNumber Int?
  completed Boolean  @default(false)
  featureId String
  feature   Feature  @relation(fields: [featureId], references: [id])
  dayTask   DayTask?
}

model DayTask {
  id          String   @id @default(cuid())
  taskId      String   @unique
  task        Task     @relation(fields: [taskId], references: [id])
  dayIndex    Int // Day 1, 2, 3...
  dueDate     DateTime
  category    String
  description String
  status      String   @default("backlog") // backlog / in_progress / done
}


model DailyLog {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  projectId       String
  project         Product  @relation(fields: [projectId], references: [id])
  date            DateTime
  completedTasks  Json
  notes           String?
  createdAt       DateTime @default(now())
}

model BuildLog {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  projectId     String
  project       Product  @relation(fields: [projectId], references: [id])
  logDate       DateTime
  tweet         String?
  belongsToDay  Int @default(1)
  summary       String
  sourceTasks   Json
  generatedAt   DateTime @default(now())
}


model EarlyAccess {
  id String @id @default(cuid())
  email String @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}
  